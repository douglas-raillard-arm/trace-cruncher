From b3efcb6368bc7f70a23e156dce6c58d09953889a Mon Sep 17 00:00:00 2001
From: "Yordan Karadzhov (VMware)" <y.karadz@gmail.com>
Date: Wed, 9 Oct 2019 16:57:27 +0300
Subject: [PATCH 2/2] kernel-shark: Add "reg_pid" plugin

"reg_pid" plugin is a simplified version of the "sched_events" plugin
that makes sure that all tasks presented in the data are registered.
All other functionalities of the "sched_events" plugin are removed.
"reg_pid" plugin will be used by the NumPy interface (Trace-Cruncher).

Signed-off-by: Yordan Karadzhov (VMware) <y.karadz@gmail.com>
---
 kernel-shark/src/plugins/CMakeLists.txt |   5 +-
 kernel-shark/src/plugins/reg_pid.c      | 189 ++++++++++++++++++++++++
 2 files changed, 193 insertions(+), 1 deletion(-)
 create mode 100644 kernel-shark/src/plugins/reg_pid.c

diff --git a/kernel-shark/src/plugins/CMakeLists.txt b/kernel-shark/src/plugins/CMakeLists.txt
index 6c77179..bf69945 100644
--- a/kernel-shark/src/plugins/CMakeLists.txt
+++ b/kernel-shark/src/plugins/CMakeLists.txt
@@ -27,7 +27,10 @@ BUILD_PLUGIN(NAME missed_events
              SOURCE missed_events.c MissedEvents.cpp)
 list(APPEND PLUGIN_LIST "missed_events default") # This plugin will be loaded by default
 
-install(TARGETS sched_events missed_events
+BUILD_PLUGIN(NAME reg_pid
+             SOURCE reg_pid.c)
+
+install(TARGETS sched_events missed_events reg_pid
         LIBRARY DESTINATION ${KS_PLUGIN_INSTALL_PREFIX})
 
 set(PLUGINS ${PLUGIN_LIST} PARENT_SCOPE)
diff --git a/kernel-shark/src/plugins/reg_pid.c b/kernel-shark/src/plugins/reg_pid.c
new file mode 100644
index 0000000..4116dd8
--- /dev/null
+++ b/kernel-shark/src/plugins/reg_pid.c
@@ -0,0 +1,189 @@
+// SPDX-License-Identifier: LGPL-2.1
+
+/*
+ * Copyright (C) 2018 VMware Inc, Yordan Karadzhov <y.karadz@gmail.com>
+ */
+
+/**
+ *  @file    reg_pid.c
+ *  @brief   Defines a callback function for Sched events used to registers the
+ *	     "next" task (if not registered already).
+ */
+
+// C
+#include <stdlib.h>
+#include <stdio.h>
+#include <assert.h>
+
+// KernelShark
+#include "libkshark.h"
+
+/** Structure representing a plugin-specific context. */
+struct plugin_pid_reg_context {
+	/** Page event used to parse the page. */
+	struct tep_handle	*pevent;
+
+	/** Pointer to the sched_switch_event object. */
+	struct tep_event	*sched_switch_event;
+
+	/** Pointer to the sched_switch_next_field format descriptor. */
+	struct tep_format_field	*sched_switch_next_field;
+
+	/** Pointer to the sched_switch_comm_field format descriptor. */
+	struct tep_format_field	*sched_switch_comm_field;
+};
+
+/** Plugin context instance. */
+struct plugin_pid_reg_context *plugin_pid_reg_context_handler = NULL;
+
+static void plugin_free_context(struct plugin_pid_reg_context *plugin_ctx)
+{
+	if (!plugin_ctx)
+		return;
+
+	free(plugin_ctx);
+}
+
+static bool plugin_pid_reg_init_context(struct kshark_context *kshark_ctx)
+{
+	struct plugin_pid_reg_context *plugin_ctx;
+	struct tep_event *event;
+
+	/* No context should exist when we initialize the plugin. */
+	assert(plugin_pid_reg_context_handler == NULL);
+
+	if (!kshark_ctx->pevent)
+		return false;
+
+	plugin_pid_reg_context_handler =
+		calloc(1, sizeof(*plugin_pid_reg_context_handler));
+	if (!plugin_pid_reg_context_handler) {
+		fprintf(stderr,
+			"Failed to allocate memory for plugin_pid_reg_context.\n");
+		return false;
+	}
+
+	plugin_ctx = plugin_pid_reg_context_handler;
+	plugin_ctx->pevent = kshark_ctx->pevent;
+
+	event = tep_find_event_by_name(plugin_ctx->pevent,
+				       "sched", "sched_switch");
+	if (!event) {
+		plugin_free_context(plugin_ctx);
+		plugin_pid_reg_context_handler = NULL;
+
+		return false;
+	}
+
+	plugin_ctx->sched_switch_event = event;
+
+	plugin_ctx->sched_switch_next_field =
+		tep_find_any_field(event, "next_pid");
+
+	plugin_ctx->sched_switch_comm_field =
+		tep_find_field(event, "next_comm");
+
+	return true;
+}
+
+/**
+ * @brief Get the Process Id of the next scheduled task.
+ *
+ * @param record: Input location for a sched_switch record.
+ */
+int plugin_get_next_pid(struct tep_record *record)
+{
+	struct plugin_pid_reg_context *plugin_ctx =
+		plugin_pid_reg_context_handler;
+	unsigned long long val;
+	int ret;
+
+	ret = tep_read_number_field(plugin_ctx->sched_switch_next_field,
+				    record->data, &val);
+
+	return ret ? : val;
+}
+
+static void plugin_register_command(struct kshark_context *kshark_ctx,
+				    struct tep_record *record,
+				    int pid)
+{
+	struct plugin_pid_reg_context *plugin_ctx =
+		plugin_pid_reg_context_handler;
+	const char *comm;
+
+	if (!plugin_ctx->sched_switch_comm_field)
+		return;
+
+	comm = record->data + plugin_ctx->sched_switch_comm_field->offset;
+	/*
+	 * TODO: The retrieve of the name of the command above needs to be
+	 * implemented as a wrapper function in libtracevent.
+	 */
+
+	if (!tep_is_pid_registered(kshark_ctx->pevent, pid))
+			tep_register_comm(kshark_ctx->pevent, comm, pid);
+}
+
+static void plugin_pid_reg_action(struct kshark_context *kshark_ctx,
+				  struct tep_record *rec,
+				  struct kshark_entry *entry)
+{
+	int pid = plugin_get_next_pid(rec);
+	if (pid >= 0)
+		plugin_register_command(kshark_ctx, rec, pid);
+}
+
+static void nop_action(struct kshark_cpp_argv *argv, int val, int action)
+{}
+
+static int plugin_pid_reg_init(struct kshark_context *kshark_ctx)
+{
+	struct plugin_pid_reg_context *plugin_ctx;
+
+	if (!plugin_pid_reg_init_context(kshark_ctx))
+		return 0;
+
+	plugin_ctx = plugin_pid_reg_context_handler;
+
+	kshark_register_event_handler(&kshark_ctx->event_handlers,
+				      plugin_ctx->sched_switch_event->id,
+				      plugin_pid_reg_action,
+				      nop_action);
+
+	return 1;
+}
+
+static int plugin_pid_reg_close(struct kshark_context *kshark_ctx)
+{
+	struct plugin_pid_reg_context *plugin_ctx;
+
+	if (!plugin_pid_reg_context_handler)
+		return 0;
+
+	plugin_ctx = plugin_pid_reg_context_handler;
+
+	kshark_unregister_event_handler(&kshark_ctx->event_handlers,
+					plugin_ctx->sched_switch_event->id,
+					plugin_pid_reg_action,
+					nop_action);
+
+	plugin_free_context(plugin_ctx);
+	plugin_pid_reg_context_handler = NULL;
+
+	return 1;
+}
+
+/** Load this plugin. */
+int KSHARK_PLUGIN_INITIALIZER(struct kshark_context *kshark_ctx)
+{
+// 	printf("--> pid_reg init\n");
+	return plugin_pid_reg_init(kshark_ctx);
+}
+
+/** Unload this plugin. */
+int KSHARK_PLUGIN_DEINITIALIZER(struct kshark_context *kshark_ctx)
+{
+// 	printf("<-- pid reg close\n");
+	return plugin_pid_reg_close(kshark_ctx);
+}
-- 
2.20.1

